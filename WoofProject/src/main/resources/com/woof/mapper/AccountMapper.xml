<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.woof.mapper.AccountMapper">

	<resultMap type="Account" id="accontMap">
		<id property="username" column="username" />
		<result property="username" column="username" />
		<result property="password" column="password" />
		<result property="name" column="name" />
		<result property="tel" column="tel" />
		<result property="address" column="address" />
		<result property="address1" column="address1" />
		<result property="address2" column="address2" />
		<result property="address3" column="address3" />
		<result property="address4" column="address4" />
		<result property="status" column="status" />
		<result property="regDate" column="regDate" />
		<collection property="authList" resultMap="authMap">
		</collection>
	</resultMap>

	<resultMap type="accountAuth" id="authMap">
		<result property="username" column="username" />
		<result property="auth" column="auth" />
	</resultMap>

	<select id="readByUsername" resultMap="accontMap">
		SELECT
		acc.username,
		password, name, tel, address,address1,address2,address3,address4,
		status, regDate, auth
		FROM
		account acc
		LEFT OUTER JOIN account_auth auth
		ON acc.username = auth.username
		WHERE
		acc.username = #{username} and
		acc.status = 'active'
	</select>
	<!-- 내정보 -->
	<select id="getAccount" parameterType="Account">
		SELECT
		acc.username,
		password, name, tel, address,address1,address2,address3,address4,
		status, regDate, auth
		FROM
		account acc
		LEFT OUTER JOIN account_auth auth
		ON acc.username = auth.username
		WHERE
		acc.username = #{username}
	</select>
	<!-- Account들의 모든정보 리스트 username 찾기-->
	<select id="getAccountList" resultType="Account">
		<!-- SELECT * FROM account
		WHERE username LIKE '%' || #{username} || '%'
		ORDER BY regDate DESC -->
		
		SELECT * 
		FROM
			(SELECT  ROWNUM AS rnum, username,name,tel,address,status,regdate
			FROM (
				SELECT * 
				FROM account
				WHERE username LIKE '%' || #{keyword} || '%'
				ORDER BY regdate DESC))
		WHERE rnum BETWEEN #{sizePerPage}*#{page}-9 and #{sizePerPage}*#{page}
	</select>
	<!-- 계정 등록 처리 -->
	<insert id="registerAccount">
		INSERT INTO account
		(username,password,name,tel,address,address1,address2,address3,address4)
		VALUES
		(
		#{username},
		#{password},
		#{name},
		#{tel},
		#{address},
		#{address1},
		#{address2},
		#{address3},
		#{address4}
		)
	</insert>
	<!-- 권한생성 -->
	<insert id="registerAccountAuth">
		INSERT INTO account_auth(
		username,
		auth
		) VALUES (
		#{username},
		#{auth}
		)
	</insert>


	<!-- 정보 수정 -->
	<update id="modifyAccount" parameterType="Account">
		UPDATE account
		SET
		password=#{password},
		name=#{name},
		tel=#{tel},
		address=#{address},
		address1=#{address1},
		address2=#{address2},
		address3=#{address3},
		address4=#{address4}
		WHERE
		username=#{username}
	</update>


	<!-- 유저 탈퇴 -->
	<update id="deleteAccount" parameterType="Account">
		UPDATE account SET
		status='deactivated'
		WHERE username = #{username}
	</update>



	<!-- 회원 테이블의 데이터 건수 조회 -->
	<select id="countAll" resultType="int">
		SELECT count(*) 
		FROM account
		WHERE username LIKE '%' || #{keyword} || '%'
	</select>

	<!-- 관리자가 유저정지 및 해제 -->
	<update id="restoreAccount" parameterType="Account">
		UPDATE account SET
		status = CASE
		WHEN status = 'active' THEN 'deactivated'
		WHEN status = 'deactivated' THEN 'active'
		END
		WHERE username = #{username}
	</update>
	<!-- 아이디중복체크 -->
	<select id="checkusername" parameterType="Account">
	SELECT count(*) FROM account WHERE username = #{username}
	</select>
</mapper>